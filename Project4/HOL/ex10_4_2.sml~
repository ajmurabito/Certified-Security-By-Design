(* Solution to exercise 10.4.2    *)

set_goal([``p /\ q ==> r``,``r ==> s``,`` ~s``],``p ==> ~q``);

PAT_ASSUM ``r ==> s`` (fn th => ASSUME_TAC (IMP_ELIM th));
PAT_ASSUM ``~r:bool \/ s:bool`` (fn th => ASSUME_TAC (ONCE_REWRITE_RULE[DISJ_SYM] th));
PAT_ASSUM ``s:bool \/ ~r:bool`` (fn th => ASSUME_TAC (DISJ_IMP th));
RES_TAC;
PAT_ASSUM ``p:bool /\ q:bool ==> r:bool`` (fn th => ASSUME_TAC (ONCE_REWRITE_RULE[DISJ_SYM](IMP_ELIM th)));
PAT_ASSUM ``r:bool \/ ~(p /\ q)`` (fn th => ASSUME_TAC (DISJ_IMP th));
(* PAT_ASSUM ``~r ==> ~(p /\ q)`` (fn th => ASSUME_TAC (MP th (ASSUME ``~r``))) *);  
RES_TAC
let
  val demorgan = SPEC ``q:bool`` (SPEC ``p:bool`` DE_MORGAN_THM)
in
  PAT_ASSUM ``~(p /\ q)`` (fn th => ASSUME_TAC (REWRITE_RULE [] (DISJ_IMP (EQ_MP (CONJUNCT1 demorgan) (ASSUME ``~(p /\ q)``)))))
end;
ASM_REWRITE_TAC [];

(* Packed together in TAC_PROOF *)
val probelm2_thm = 
TAC_PROOF (
([``p /\ q ==> r``,``r ==> s``,`` ~s``],``p ==> ~q``),
PAT_ASSUM ``r ==> s`` (fn th => ASSUME_TAC (IMP_ELIM th)) THEN
PAT_ASSUM ``~r:bool \/ s:bool`` (fn th => ASSUME_TAC (ONCE_REWRITE_RULE[DISJ_SYM] th)) THEN
PAT_ASSUM ``s:bool \/ ~r:bool`` (fn th => ASSUME_TAC (DISJ_IMP th)) THEN
RES_TAC THEN
PAT_ASSUM ``p:bool /\ q:bool ==> r:bool`` (fn th => ASSUME_TAC (ONCE_REWRITE_RULE[DISJ_SYM](IMP_ELIM th))) THEN
PAT_ASSUM ``r:bool \/ ~(p /\ q)`` (fn th => ASSUME_TAC (DISJ_IMP th)) THEN
RES_TAC THEN
(let
  val demorgan = SPEC ``q:bool`` (SPEC ``p:bool`` DE_MORGAN_THM)
in
  PAT_ASSUM ``~(p /\ q)`` (fn th => ASSUME_TAC (REWRITE_RULE [] (DISJ_IMP (EQ_MP (CONJUNCT1 demorgan) (ASSUME ``~(p /\ q)``)))))
end) THEN
ASM_REWRITE_TAC []
);